# === justfile ===

# Define a variable for all your environments
ENVS := 'cpy312 cpy311 cpy310 pypy310 pypy311'

# List all recipes
default:
    @just --list

# Create a single virtual environment (usage: `just venv cpy312`)
venv env:
    #!/usr/bin/env bash
    set -e
    # A simple case statement is much clearer than make's variable magic
    case {{env}} in
        cpy312) python_exe="python3.12";;
        cpy311) python_exe="python3.11";;
        cpy310) python_exe="python3.10";;
        pypy310) python_exe="pypy3.10";;
        pypy311) python_exe="pypy3.11";;
        *) echo "Unknown environment: {{env}}"; exit 1;;
    esac
    echo "==> Creating virtual environment for {{env}}..."
    uv venv --python ${python_exe} .venv-{{env}}

# Get the version of a single environment's Python (usage: `just version cpy312`)
version env: (venv env)
    echo "==> Getting Python version for environment {{env}}..."
    ./.venv-{{env}}/bin/python -V

# Get versions of all Python environment
version-all:
    #!/usr/bin/env bash
    for env in {{ENVS}}; do
        just version ${env}
    done

# === Docker Workflow ===

# Define the name of our Docker image as a variable for easy reuse.
IMAGE_NAME := 'sempervivum-dockerized'

# Build the Docker image from the Dockerfile in the current directory.
docker-build:
    @echo "==> Building the Docker image '{{IMAGE_NAME}}'..."
    docker build -t {{IMAGE_NAME}} .

# Inspect the built Docker image
docker-inspect:
    @echo "==> Inspecting the built Docker image '{{IMAGE_NAME}}'..."
    docker image inspect {{IMAGE_NAME}}

# Layers of the built Docker image
docker-layers:
    @echo "==> Listing layers of the built Docker image '{{IMAGE_NAME}}'..."
    docker history {{IMAGE_NAME}}

# Summary of the built Docker image
docker-image:
    @echo "==> Summary of the built Docker image '{{IMAGE_NAME}}'..."
    docker images {{IMAGE_NAME}}

# Run the container with its default command run inside (== `just && echo && just version-all`).
docker-run:
    @echo "==> Running container from the built Docker image with default command..."
    docker run --rm -it {{IMAGE_NAME}}

# Run a specific recipe with arguments inside the container (usage: `just docker-exec who am i`)
docker-exec +args:
    @echo "==> Executing '{{args}}' inside the container..."
    # When `{{args}}` is interpolated, `just` correctly passes the
    # captured arguments to the `docker run` command.
    docker run --rm -it {{IMAGE_NAME}} {{args}}